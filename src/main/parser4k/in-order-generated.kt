@file:Suppress("UNCHECKED_CAST")

package parser4k

/////////////////////////////////////////////////
// This file is generated by generate-in-order.kt
/////////////////////////////////////////////////

fun <T2> InOrder2<*, T2>.skipFirst() = map { (_, it2) -> List1(it2) }
fun <T2, T3> InOrder3<*, T2, T3>.skipFirst() = map { (_, it2, it3) -> List2(it2, it3) }
fun <T2, T3, T4> InOrder4<*, T2, T3, T4>.skipFirst() = map { (_, it2, it3, it4) -> List3(it2, it3, it4) }
fun <T2, T3, T4, T5> InOrder5<*, T2, T3, T4, T5>.skipFirst() = map { (_, it2, it3, it4, it5) -> List4(it2, it3, it4, it5) }
fun <T2, T3, T4, T5, T6> InOrder6<*, T2, T3, T4, T5, T6>.skipFirst() = map { (_, it2, it3, it4, it5, it6) -> List5(it2, it3, it4, it5, it6) }
fun <T2, T3, T4, T5, T6, T7> InOrder7<*, T2, T3, T4, T5, T6, T7>.skipFirst() = map { (_, it2, it3, it4, it5, it6, it7) -> List6(it2, it3, it4, it5, it6, it7) }
fun <T2, T3, T4, T5, T6, T7, T8> InOrder8<*, T2, T3, T4, T5, T6, T7, T8>.skipFirst() = map { (_, it2, it3, it4, it5, it6, it7, it8) -> List7(it2, it3, it4, it5, it6, it7, it8) }

fun <T1> InOrder2<T1, *>.skipLast() = map { (it1, _) -> List1(it1) }
fun <T1, T2> InOrder3<T1, T2, *>.skipLast() = map { (it1, it2, _) -> List2(it1, it2) }
fun <T1, T2, T3> InOrder4<T1, T2, T3, *>.skipLast() = map { (it1, it2, it3, _) -> List3(it1, it2, it3) }
fun <T1, T2, T3, T4> InOrder5<T1, T2, T3, T4, *>.skipLast() = map { (it1, it2, it3, it4, _) -> List4(it1, it2, it3, it4) }
fun <T1, T2, T3, T4, T5> InOrder6<T1, T2, T3, T4, T5, *>.skipLast() = map { (it1, it2, it3, it4, it5, _) -> List5(it1, it2, it3, it4, it5) }
fun <T1, T2, T3, T4, T5, T6> InOrder7<T1, T2, T3, T4, T5, T6, *>.skipLast() = map { (it1, it2, it3, it4, it5, it6, _) -> List6(it1, it2, it3, it4, it5, it6) }
fun <T1, T2, T3, T4, T5, T6, T7> InOrder8<T1, T2, T3, T4, T5, T6, T7, *>.skipLast() = map { (it1, it2, it3, it4, it5, it6, it7, _) -> List7(it1, it2, it3, it4, it5, it6, it7) }

fun <T2> InOrder3<*, T2, *>.skipWrapper() = map { (_, it2, _) -> it2 }
fun <T2, T3> InOrder4<*, T2, T3, *>.skipWrapper() = map { (_, it2, it3, _) -> List2(it2, it3) }
fun <T2, T3, T4> InOrder5<*, T2, T3, T4, *>.skipWrapper() = map { (_, it2, it3, it4, _) -> List3(it2, it3, it4) }
fun <T2, T3, T4, T5> InOrder6<*, T2, T3, T4, T5, *>.skipWrapper() = map { (_, it2, it3, it4, it5, _) -> List4(it2, it3, it4, it5) }
fun <T2, T3, T4, T5, T6> InOrder7<*, T2, T3, T4, T5, T6, *>.skipWrapper() = map { (_, it2, it3, it4, it5, it6, _) -> List5(it2, it3, it4, it5, it6) }
fun <T2, T3, T4, T5, T6, T7> InOrder8<*, T2, T3, T4, T5, T6, T7, *>.skipWrapper() = map { (_, it2, it3, it4, it5, it6, it7, _) -> List6(it2, it3, it4, it5, it6, it7) }

fun <T1, T2, T3> InOrder3<T1, T2, T3>.leftAssoc(transform: (List3<T1, T2, T3>) -> T1) =
    InOrder(listOf(parser1, parser2, parser3))
        .leftAssoc { (it1, it2, it3) -> transform(List3(it1 as T1, it2 as T2, it3 as T3)) } as Parser<T1>
fun <T1, T2, T3, T4> InOrder4<T1, T2, T3, T4>.leftAssoc(transform: (List4<T1, T2, T3, T4>) -> T1) =
    InOrder(listOf(parser1, parser2, parser3, parser4))
        .leftAssoc { (it1, it2, it3, it4) -> transform(List4(it1 as T1, it2 as T2, it3 as T3, it4 as T4)) } as Parser<T1>
fun <T1, T2, T3, T4, T5> InOrder5<T1, T2, T3, T4, T5>.leftAssoc(transform: (List5<T1, T2, T3, T4, T5>) -> T1) =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5))
        .leftAssoc { (it1, it2, it3, it4, it5) -> transform(List5(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6> InOrder6<T1, T2, T3, T4, T5, T6>.leftAssoc(transform: (List6<T1, T2, T3, T4, T5, T6>) -> T1) =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6))
        .leftAssoc { (it1, it2, it3, it4, it5, it6) -> transform(List6(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6, T7> InOrder7<T1, T2, T3, T4, T5, T6, T7>.leftAssoc(transform: (List7<T1, T2, T3, T4, T5, T6, T7>) -> T1) =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7))
        .leftAssoc { (it1, it2, it3, it4, it5, it6, it7) -> transform(List7(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6, it7 as T7)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6, T7, T8> InOrder8<T1, T2, T3, T4, T5, T6, T7, T8>.leftAssoc(transform: (List8<T1, T2, T3, T4, T5, T6, T7, T8>) -> T1) =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7, parser8))
        .leftAssoc { (it1, it2, it3, it4, it5, it6, it7, it8) -> transform(List8(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6, it7 as T7, it8 as T8)) } as Parser<T1>

