@file:Suppress("UNCHECKED_CAST", "unused")

package parser4k

/////////////////////////////////////////////////
// This file is generated by generate-in-order.kt
/////////////////////////////////////////////////

fun <T2> InOrder2<*, T2>.skipFirst(): Parser<T2> = map { (_, it2) -> it2 }
fun <T2, T3> InOrder3<*, T2, T3>.skipFirst(): Parser<List2<T2, T3>> = map { (_, it2, it3) -> List2(it2, it3) }
fun <T2, T3, T4> InOrder4<*, T2, T3, T4>.skipFirst(): Parser<List3<T2, T3, T4>> = map { (_, it2, it3, it4) -> List3(it2, it3, it4) }
fun <T2, T3, T4, T5> InOrder5<*, T2, T3, T4, T5>.skipFirst(): Parser<List4<T2, T3, T4, T5>> = map { (_, it2, it3, it4, it5) -> List4(it2, it3, it4, it5) }
fun <T2, T3, T4, T5, T6> InOrder6<*, T2, T3, T4, T5, T6>.skipFirst(): Parser<List5<T2, T3, T4, T5, T6>> = map { (_, it2, it3, it4, it5, it6) -> List5(it2, it3, it4, it5, it6) }
fun <T2, T3, T4, T5, T6, T7> InOrder7<*, T2, T3, T4, T5, T6, T7>.skipFirst(): Parser<List6<T2, T3, T4, T5, T6, T7>> = map { (_, it2, it3, it4, it5, it6, it7) -> List6(it2, it3, it4, it5, it6, it7) }
fun <T2, T3, T4, T5, T6, T7, T8> InOrder8<*, T2, T3, T4, T5, T6, T7, T8>.skipFirst(): Parser<List7<T2, T3, T4, T5, T6, T7, T8>> = map { (_, it2, it3, it4, it5, it6, it7, it8) -> List7(it2, it3, it4, it5, it6, it7, it8) }

fun <T1> InOrder2<T1, *>.skipLast(): Parser<T1> = map { (it1, _) -> it1 }
fun <T1, T2> InOrder3<T1, T2, *>.skipLast(): Parser<List2<T1, T2>> = map { (it1, it2, _) -> List2(it1, it2) }
fun <T1, T2, T3> InOrder4<T1, T2, T3, *>.skipLast(): Parser<List3<T1, T2, T3>> = map { (it1, it2, it3, _) -> List3(it1, it2, it3) }
fun <T1, T2, T3, T4> InOrder5<T1, T2, T3, T4, *>.skipLast(): Parser<List4<T1, T2, T3, T4>> = map { (it1, it2, it3, it4, _) -> List4(it1, it2, it3, it4) }
fun <T1, T2, T3, T4, T5> InOrder6<T1, T2, T3, T4, T5, *>.skipLast(): Parser<List5<T1, T2, T3, T4, T5>> = map { (it1, it2, it3, it4, it5, _) -> List5(it1, it2, it3, it4, it5) }
fun <T1, T2, T3, T4, T5, T6> InOrder7<T1, T2, T3, T4, T5, T6, *>.skipLast(): Parser<List6<T1, T2, T3, T4, T5, T6>> = map { (it1, it2, it3, it4, it5, it6, _) -> List6(it1, it2, it3, it4, it5, it6) }
fun <T1, T2, T3, T4, T5, T6, T7> InOrder8<T1, T2, T3, T4, T5, T6, T7, *>.skipLast(): Parser<List7<T1, T2, T3, T4, T5, T6, T7>> = map { (it1, it2, it3, it4, it5, it6, it7, _) -> List7(it1, it2, it3, it4, it5, it6, it7) }

fun <T2> InOrder3<*, T2, *>.skipWrapper(): Parser<T2> = map { (_, it2, _) -> it2 }
fun <T2, T3> InOrder4<*, T2, T3, *>.skipWrapper(): Parser<List2<T2, T3>> = map { (_, it2, it3, _) -> List2(it2, it3) }
fun <T2, T3, T4> InOrder5<*, T2, T3, T4, *>.skipWrapper(): Parser<List3<T2, T3, T4>> = map { (_, it2, it3, it4, _) -> List3(it2, it3, it4) }
fun <T2, T3, T4, T5> InOrder6<*, T2, T3, T4, T5, *>.skipWrapper(): Parser<List4<T2, T3, T4, T5>> = map { (_, it2, it3, it4, it5, _) -> List4(it2, it3, it4, it5) }
fun <T2, T3, T4, T5, T6> InOrder7<*, T2, T3, T4, T5, T6, *>.skipWrapper(): Parser<List5<T2, T3, T4, T5, T6>> = map { (_, it2, it3, it4, it5, it6, _) -> List5(it2, it3, it4, it5, it6) }
fun <T2, T3, T4, T5, T6, T7> InOrder8<*, T2, T3, T4, T5, T6, T7, *>.skipWrapper(): Parser<List6<T2, T3, T4, T5, T6, T7>> = map { (_, it2, it3, it4, it5, it6, it7, _) -> List6(it2, it3, it4, it5, it6, it7) }

fun <T1, T2, T3> InOrder3<T1, T2, T3>.leftAssoc(transform: (List3<T1, T2, T3>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3))
        .leftAssoc { (it1, it2, it3) -> transform(List3(it1 as T1, it2 as T2, it3 as T3)) } as Parser<T1>
fun <T1, T2, T3, T4> InOrder4<T1, T2, T3, T4>.leftAssoc(transform: (List4<T1, T2, T3, T4>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4))
        .leftAssoc { (it1, it2, it3, it4) -> transform(List4(it1 as T1, it2 as T2, it3 as T3, it4 as T4)) } as Parser<T1>
fun <T1, T2, T3, T4, T5> InOrder5<T1, T2, T3, T4, T5>.leftAssoc(transform: (List5<T1, T2, T3, T4, T5>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5))
        .leftAssoc { (it1, it2, it3, it4, it5) -> transform(List5(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6> InOrder6<T1, T2, T3, T4, T5, T6>.leftAssoc(transform: (List6<T1, T2, T3, T4, T5, T6>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6))
        .leftAssoc { (it1, it2, it3, it4, it5, it6) -> transform(List6(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6, T7> InOrder7<T1, T2, T3, T4, T5, T6, T7>.leftAssoc(transform: (List7<T1, T2, T3, T4, T5, T6, T7>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7))
        .leftAssoc { (it1, it2, it3, it4, it5, it6, it7) -> transform(List7(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6, it7 as T7)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6, T7, T8> InOrder8<T1, T2, T3, T4, T5, T6, T7, T8>.leftAssoc(transform: (List8<T1, T2, T3, T4, T5, T6, T7, T8>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7, parser8))
        .leftAssoc { (it1, it2, it3, it4, it5, it6, it7, it8) -> transform(List8(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6, it7 as T7, it8 as T8)) } as Parser<T1>

class InOrder2<T1, T2>(val parser1: Parser<T1>, val parser2: Parser<T2>) : Parser<List2<T1, T2>> {
    override fun parse(input: Input): Output<List2<T1, T2>>? = 
        InOrder(listOf(parser1, parser2)).map { List2(it[0] as T1, it[1] as T2) }.parse(input)
}
class InOrder3<T1, T2, T3>(val parser1: Parser<T1>, val parser2: Parser<T2>, val parser3: Parser<T3>) : Parser<List3<T1, T2, T3>> {
    override fun parse(input: Input): Output<List3<T1, T2, T3>>? = 
        InOrder(listOf(parser1, parser2, parser3)).map { List3(it[0] as T1, it[1] as T2, it[2] as T3) }.parse(input)
}
class InOrder4<T1, T2, T3, T4>(val parser1: Parser<T1>, val parser2: Parser<T2>, val parser3: Parser<T3>, val parser4: Parser<T4>) : Parser<List4<T1, T2, T3, T4>> {
    override fun parse(input: Input): Output<List4<T1, T2, T3, T4>>? = 
        InOrder(listOf(parser1, parser2, parser3, parser4)).map { List4(it[0] as T1, it[1] as T2, it[2] as T3, it[3] as T4) }.parse(input)
}
class InOrder5<T1, T2, T3, T4, T5>(val parser1: Parser<T1>, val parser2: Parser<T2>, val parser3: Parser<T3>, val parser4: Parser<T4>, val parser5: Parser<T5>) : Parser<List5<T1, T2, T3, T4, T5>> {
    override fun parse(input: Input): Output<List5<T1, T2, T3, T4, T5>>? = 
        InOrder(listOf(parser1, parser2, parser3, parser4, parser5)).map { List5(it[0] as T1, it[1] as T2, it[2] as T3, it[3] as T4, it[4] as T5) }.parse(input)
}
class InOrder6<T1, T2, T3, T4, T5, T6>(val parser1: Parser<T1>, val parser2: Parser<T2>, val parser3: Parser<T3>, val parser4: Parser<T4>, val parser5: Parser<T5>, val parser6: Parser<T6>) : Parser<List6<T1, T2, T3, T4, T5, T6>> {
    override fun parse(input: Input): Output<List6<T1, T2, T3, T4, T5, T6>>? = 
        InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6)).map { List6(it[0] as T1, it[1] as T2, it[2] as T3, it[3] as T4, it[4] as T5, it[5] as T6) }.parse(input)
}
class InOrder7<T1, T2, T3, T4, T5, T6, T7>(val parser1: Parser<T1>, val parser2: Parser<T2>, val parser3: Parser<T3>, val parser4: Parser<T4>, val parser5: Parser<T5>, val parser6: Parser<T6>, val parser7: Parser<T7>) : Parser<List7<T1, T2, T3, T4, T5, T6, T7>> {
    override fun parse(input: Input): Output<List7<T1, T2, T3, T4, T5, T6, T7>>? = 
        InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7)).map { List7(it[0] as T1, it[1] as T2, it[2] as T3, it[3] as T4, it[4] as T5, it[5] as T6, it[6] as T7) }.parse(input)
}
class InOrder8<T1, T2, T3, T4, T5, T6, T7, T8>(val parser1: Parser<T1>, val parser2: Parser<T2>, val parser3: Parser<T3>, val parser4: Parser<T4>, val parser5: Parser<T5>, val parser6: Parser<T6>, val parser7: Parser<T7>, val parser8: Parser<T8>) : Parser<List8<T1, T2, T3, T4, T5, T6, T7, T8>> {
    override fun parse(input: Input): Output<List8<T1, T2, T3, T4, T5, T6, T7, T8>>? = 
        InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7, parser8)).map { List8(it[0] as T1, it[1] as T2, it[2] as T3, it[3] as T4, it[4] as T5, it[5] as T6, it[6] as T7, it[7] as T8) }.parse(input)
}

fun <T1, T2> inOrder(parser1: Parser<T1>, parser2: Parser<T2>): InOrder2<T1, T2> =
    InOrder2(parser1, parser2)
fun <T1, T2, T3> inOrder(parser1: Parser<T1>, parser2: Parser<T2>, parser3: Parser<T3>): InOrder3<T1, T2, T3> =
    InOrder3(parser1, parser2, parser3)
fun <T1, T2, T3, T4> inOrder(parser1: Parser<T1>, parser2: Parser<T2>, parser3: Parser<T3>, parser4: Parser<T4>): InOrder4<T1, T2, T3, T4> =
    InOrder4(parser1, parser2, parser3, parser4)
fun <T1, T2, T3, T4, T5> inOrder(parser1: Parser<T1>, parser2: Parser<T2>, parser3: Parser<T3>, parser4: Parser<T4>, parser5: Parser<T5>): InOrder5<T1, T2, T3, T4, T5> =
    InOrder5(parser1, parser2, parser3, parser4, parser5)
fun <T1, T2, T3, T4, T5, T6> inOrder(parser1: Parser<T1>, parser2: Parser<T2>, parser3: Parser<T3>, parser4: Parser<T4>, parser5: Parser<T5>, parser6: Parser<T6>): InOrder6<T1, T2, T3, T4, T5, T6> =
    InOrder6(parser1, parser2, parser3, parser4, parser5, parser6)
fun <T1, T2, T3, T4, T5, T6, T7> inOrder(parser1: Parser<T1>, parser2: Parser<T2>, parser3: Parser<T3>, parser4: Parser<T4>, parser5: Parser<T5>, parser6: Parser<T6>, parser7: Parser<T7>): InOrder7<T1, T2, T3, T4, T5, T6, T7> =
    InOrder7(parser1, parser2, parser3, parser4, parser5, parser6, parser7)
fun <T1, T2, T3, T4, T5, T6, T7, T8> inOrder(parser1: Parser<T1>, parser2: Parser<T2>, parser3: Parser<T3>, parser4: Parser<T4>, parser5: Parser<T5>, parser6: Parser<T6>, parser7: Parser<T7>, parser8: Parser<T8>): InOrder8<T1, T2, T3, T4, T5, T6, T7, T8> =
    InOrder8(parser1, parser2, parser3, parser4, parser5, parser6, parser7, parser8)

data class List1<T1>(val value1: T1) {
    operator fun <T1> plus(value1: T1): List1<T1> = 
        List1(value1)
}
data class List2<T1, T2>(val value1: T1, val value2: T2) {
    operator fun <T2> plus(value2: T2): List2<T1, T2> = 
        List2(value1, value2)
}
data class List3<T1, T2, T3>(val value1: T1, val value2: T2, val value3: T3) {
    operator fun <T3> plus(value3: T3): List3<T1, T2, T3> = 
        List3(value1, value2, value3)
}
data class List4<T1, T2, T3, T4>(val value1: T1, val value2: T2, val value3: T3, val value4: T4) {
    operator fun <T4> plus(value4: T4): List4<T1, T2, T3, T4> = 
        List4(value1, value2, value3, value4)
}
data class List5<T1, T2, T3, T4, T5>(val value1: T1, val value2: T2, val value3: T3, val value4: T4, val value5: T5) {
    operator fun <T5> plus(value5: T5): List5<T1, T2, T3, T4, T5> = 
        List5(value1, value2, value3, value4, value5)
}
data class List6<T1, T2, T3, T4, T5, T6>(val value1: T1, val value2: T2, val value3: T3, val value4: T4, val value5: T5, val value6: T6) {
    operator fun <T6> plus(value6: T6): List6<T1, T2, T3, T4, T5, T6> = 
        List6(value1, value2, value3, value4, value5, value6)
}
data class List7<T1, T2, T3, T4, T5, T6, T7>(val value1: T1, val value2: T2, val value3: T3, val value4: T4, val value5: T5, val value6: T6, val value7: T7) {
    operator fun <T7> plus(value7: T7): List7<T1, T2, T3, T4, T5, T6, T7> = 
        List7(value1, value2, value3, value4, value5, value6, value7)
}
data class List8<T1, T2, T3, T4, T5, T6, T7, T8>(val value1: T1, val value2: T2, val value3: T3, val value4: T4, val value5: T5, val value6: T6, val value7: T7, val value8: T8) {
    operator fun <T8> plus(value8: T8): List8<T1, T2, T3, T4, T5, T6, T7, T8> = 
        List8(value1, value2, value3, value4, value5, value6, value7, value8)
}

