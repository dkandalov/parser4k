@file:Suppress("UNCHECKED_CAST", "unused")

package parser4k

/////////////////////////////////////////////////////
// This file was generated by generate-source-code.kt
/////////////////////////////////////////////////////

fun <T1, T2> InOrder2<T1, T2>.mapLeftAssoc(transform: (List2<T1, T2>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2))
        .mapLeftAssoc { (it1, it2) -> transform(List2(it1 as T1, it2 as T2)) } as Parser<T1>
fun <T1, T2, T3> InOrder3<T1, T2, T3>.mapLeftAssoc(transform: (List3<T1, T2, T3>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3))
        .mapLeftAssoc { (it1, it2, it3) -> transform(List3(it1 as T1, it2 as T2, it3 as T3)) } as Parser<T1>
fun <T1, T2, T3, T4> InOrder4<T1, T2, T3, T4>.mapLeftAssoc(transform: (List4<T1, T2, T3, T4>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4))
        .mapLeftAssoc { (it1, it2, it3, it4) -> transform(List4(it1 as T1, it2 as T2, it3 as T3, it4 as T4)) } as Parser<T1>
fun <T1, T2, T3, T4, T5> InOrder5<T1, T2, T3, T4, T5>.mapLeftAssoc(transform: (List5<T1, T2, T3, T4, T5>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5))
        .mapLeftAssoc { (it1, it2, it3, it4, it5) -> transform(List5(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6> InOrder6<T1, T2, T3, T4, T5, T6>.mapLeftAssoc(transform: (List6<T1, T2, T3, T4, T5, T6>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6))
        .mapLeftAssoc { (it1, it2, it3, it4, it5, it6) -> transform(List6(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6, T7> InOrder7<T1, T2, T3, T4, T5, T6, T7>.mapLeftAssoc(transform: (List7<T1, T2, T3, T4, T5, T6, T7>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7))
        .mapLeftAssoc { (it1, it2, it3, it4, it5, it6, it7) -> transform(List7(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6, it7 as T7)) } as Parser<T1>
fun <T1, T2, T3, T4, T5, T6, T7, T8> InOrder8<T1, T2, T3, T4, T5, T6, T7, T8>.mapLeftAssoc(transform: (List8<T1, T2, T3, T4, T5, T6, T7, T8>) -> T1): Parser<T1> =
    InOrder(listOf(parser1, parser2, parser3, parser4, parser5, parser6, parser7, parser8))
        .mapLeftAssoc { (it1, it2, it3, it4, it5, it6, it7, it8) -> transform(List8(it1 as T1, it2 as T2, it3 as T3, it4 as T4, it5 as T5, it6 as T6, it7 as T7, it8 as T8)) } as Parser<T1>

