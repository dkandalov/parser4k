package parser4k

import java.io.File

fun main() {
    File("src/main/parser4k/in-order-generated.kt").printWriter().use { writer ->
        writer.println("package parser4k")
        writer.println()
        writer.println("/////////////////////////////////////////////////")
        writer.println("// This file is generated by generate-in-order.kt")
        writer.println("/////////////////////////////////////////////////")
        writer.println()
        generateSkipFirst { writer.println(it) }
        generateSkipLast { writer.println(it) }
        generateSkipWrapper { writer.println(it) }
    }
}

private fun generateSkipFirst(println: (String) -> Unit) {
    // For example:
    // fun <T2, T3> InOrder3<*, T2, T3>.skipFirst() = map { (_, it2, it3) -> List2(it2, it3) }
    (2..8).forEach { n ->
        val ts = (2..n).joinToString { "T$it" }
        val its = (2..n).joinToString { "it$it" }
        println("fun <$ts> InOrder$n<*, $ts>.skipFirst() = map { (_, $its) -> List${n - 1}($its) }")
    }
    println("")
}

private fun generateSkipLast(println: (String) -> Unit) {
    // For example:
    // fun <T1, T2> InOrder3<T1, T2, *>.skipLast() = map { (it1, it2, _) -> List2(it1, it2) }
    (1..7).forEach { n ->
        val ts = (1..n).joinToString { "T$it" }
        val its = (1..n).joinToString { "it$it" }
        println("fun <$ts> InOrder${n + 1}<$ts, *>.skipLast() = map { ($its, _) -> List$n($its) }")
    }
    println("")
}

private fun generateSkipWrapper(println: (String) -> Unit) {
    // For example:
    // fun <T2, T3> InOrder4<*, T2, T3, *>.skipWrapper() = map { (_, it2, it3, _) -> List2(it2, it3) }

    println("fun <T2> InOrder3<*, T2, *>.skipWrapper() = map { (_, it2, _) -> it2 }") // Special case because returning List1 is pointless
    (3..7).forEach { n ->
        val ts = (2..n).joinToString { "T$it" }
        val its = (2..n).joinToString { "it$it" }
        println("fun <$ts> InOrder${n + 1}<*, $ts, *>.skipWrapper() = map { (_, $its, _) -> List${n - 1}($its) }")
    }
    println("")
}
